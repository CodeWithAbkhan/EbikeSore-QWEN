@page "/account/profile"
@using Microsoft.AspNetCore.Components.Authorization
@using EbikeStore.Models
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager

@rendermode InteractiveServer

<AuthorizeView Context="authContext">
    <Authorized>
        <div class="container mx-auto px-4 py-8">
            <h1 class="text-3xl font-bold mb-6">My Profile</h1>
            
            @if (user == null)
            {
                <p>Loading...</p>
            }
            else
            {
                <div class="bg-white rounded-lg shadow-md p-6">
                    <EditForm Model="@user" OnValidSubmit="HandleValidSubmit" Context="editFormContext">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <label class="block text-gray-700 mb-2">First Name</label>
                                <InputText class="w-full border rounded py-2 px-3" @bind-Value="user.FirstName" />
                                <ValidationMessage For="@(() => user.FirstName)" />
                            </div>
                            
                            <div>
                                <label class="block text-gray-700 mb-2">Last Name</label>
                                <InputText class="w-full border rounded py-2 px-3" @bind-Value="user.LastName" />
                                <ValidationMessage For="@(() => user.LastName)" />
                            </div>
                            
                            <div>
                                <label class="block text-gray-700 mb-2">Email</label>
                                <InputText class="w-full border rounded py-2 px-3" @bind-Value="user.Email" />
                                <ValidationMessage For="@(() => user.Email)" />
                            </div>
                            
                            <div>
                                <label class="block text-gray-700 mb-2">Phone Number</label>
                                <InputText class="w-full border rounded py-2 px-3" @bind-Value="user.PhoneNumber" />
                                <ValidationMessage For="@(() => user.PhoneNumber)" />
                            </div>
                        </div>
                        
                        <div class="mt-6">
                            <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                                Update Profile
                            </button>
                        </div>
                    </EditForm>
                </div>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="container mx-auto px-4 py-8">
            <div class="bg-white rounded-lg shadow-md p-8 text-center">
                <h2 class="text-2xl font-bold mb-4">Access Denied</h2>
                <p class="text-gray-600">You need to be logged in to view your profile.</p>
                <a href="/account/login" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mt-4 inline-block">
                    Login
                </a>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private ApplicationUser? user;
    private string? userId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var authenticatedUser = authState.User;
        if (authenticatedUser.Identity?.IsAuthenticated ?? false)
        {
            userId = authenticatedUser.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                user = await UserManager.FindByIdAsync(userId);
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        if (user != null && !string.IsNullOrEmpty(userId))
        {
            var result = await UserManager.UpdateAsync(user);
            if (result.Succeeded)
            {
                // Show success message
            }
            else
            {
                // Show error messages
            }
        }
    }
}