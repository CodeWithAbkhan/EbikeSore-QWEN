@page "/cart"
@using Microsoft.AspNetCore.Components.Authorization
@using EbikeStore.Models
@inject IShoppingCartRepository ShoppingCartRepository
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation

@rendermode InteractiveServer

<h1 class="text-3xl font-bold mb-6">Shopping Cart</h1>

@if (shoppingCart == null || !shoppingCart.CartItems.Any())
{
    <div class="text-center py-12">
        <p class="text-xl text-gray-600 mb-4">Your cart is empty</p>
        <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" @onclick="GoToProducts">
            Continue Shopping
        </button>
    </div>
}
else
{
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <div class="lg:col-span-2">
            <div class="bg-white rounded-lg shadow-md overflow-hidden">
                <table class="w-full">
                    <thead class="bg-gray-100">
                        <tr>
                            <th class="py-3 px-4 text-left">Product</th>
                            <th class="py-3 px-4 text-center">Price</th>
                            <th class="py-3 px-4 text-center">Quantity</th>
                            <th class="py-3 px-4 text-center">Total</th>
                            <th class="py-3 px-4 text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if(shoppingCart.CartItems!=null)
                        {

                        @foreach (var item in shoppingCart.CartItems)
                        {
                            <tr class="border-b">
                                <td class="py-4 px-4">
                                    <div class="flex items-center">
                                        @if (item.Product != null)
                                        {
                                            <img src="@item.Product.ImageUrl" alt="@item.Product.Name" class="w-16 h-16 object-cover rounded" />
                                            <div class="ml-4">
                                                <div class="font-medium">@item.Product.Name</div>
                                                <div class="text-gray-600 text-sm">@item.Product.Brand?.Name</div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="ml-4 text-red-500">Product unavailable</div>
                                        }
                                    </div>
                                </td>
                                <td class="py-4 px-4 text-center">
                                    @(item.Product != null ? $"${item.Product.Price.ToString("F2")}" : "-")
                                </td>
                                <td class="py-4 px-4 text-center">
                                    <div class="flex items-center justify-center">
                                        <button class="w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center" @onclick="() => UpdateQuantity(item.Id, item.Quantity - 1)">-</button>
                                        <span class="mx-2 w-12 text-center">@item.Quantity</span>
                                        <button class="w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center" @onclick="() => UpdateQuantity(item.Id, item.Quantity + 1)">+</button>
                                    </div>
                                </td>
                                <td class="py-4 px-4 text-center font-medium">
                                    @(item.Product != null ? $"${(item.Product.Price * item.Quantity).ToString("F2")}" : "-")
                                </td>
                                <td class="py-4 px-4 text-center">
                                    <button class="text-red-500 hover:text-red-700" @onclick="() => RemoveItem(item.Id)">
                                        <span class="material-symbols-outlined">delete</span>
                                    </button>
                                </td>
                            </tr>
                        }
                        }
                    </tbody>
                </table>
            </div>
        </div>
        
        <div class="bg-white rounded-lg shadow-md p-6 h-fit">
            <h2 class="text-2xl font-bold mb-4">Order Summary</h2>
            <div class="space-y-3">
                <div class="flex justify-between">
                    <span>Subtotal</span>
                    <span>$@cartTotal.ToString("F2")</span>
                </div>
                <div class="flex justify-between">
                    <span>Shipping</span>
                    <span>Free</span>
                </div>
                <div class="flex justify-between">
                    <span>Tax</span>
                    <span>$@tax.ToString("F2")</span>
                </div>
                <div class="border-t pt-3 flex justify-between font-bold text-lg">
                    <span>Total</span>
                    <span>$@totalWithTax.ToString("F2")</span>
                </div>
            </div>
            
            <button class="w-full bg-green-500 hover:bg-green-700 text-white font-bold py-3 px-4 rounded mt-6" @onclick="ProceedToCheckout">
                Proceed to Checkout
            </button>
            
            <button class="w-full bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded mt-3" @onclick="GoToProducts">
                Continue Shopping
            </button>
        </div>
    </div>
}

@code {
    private EbikeStore.Models.ShoppingCart? shoppingCart;
    private decimal cartTotal => shoppingCart?.CartItems
        .Where(item => item.Product != null)
        .Sum(item => item.Product.Price * item.Quantity) ?? 0;
    private decimal tax => cartTotal * 0.08m; // 8% tax
    private decimal totalWithTax => cartTotal + tax;
    private string? userId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            await LoadCart();
        }
        else
        {
            Navigation.NavigateTo("/Account/Login");
        }
    }

    private async Task LoadCart()
    {
        if (!string.IsNullOrEmpty(userId))
        {
            shoppingCart = await ShoppingCartRepository.GetShoppingCartByUserIdAsync(userId);
        }
    }

    private async Task UpdateQuantity(int cartItemId, int newQuantity)
    {
        if (!string.IsNullOrEmpty(userId) && newQuantity > 0)
        {
            await ShoppingCartRepository.UpdateItemQuantityAsync(userId, cartItemId, newQuantity);
            await LoadCart();
        }
        else if (newQuantity <= 0)
        {
            await RemoveItem(cartItemId);
        }
    }

    private async Task RemoveItem(int cartItemId)
    {
        if (!string.IsNullOrEmpty(userId))
        {
            await ShoppingCartRepository.RemoveItemFromCartAsync(userId, cartItemId);
            await LoadCart();
        }
    }

    private void ProceedToCheckout()
    {
        Navigation.NavigateTo("/checkout");
    }

    private void GoToProducts()
    {
        Navigation.NavigateTo("/products");
    }
}